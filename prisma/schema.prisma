// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  name              String?
  password          String
  isAdmin           Boolean  @default(false)
  isEmailVerified   Boolean  @default(false)
  emailVerificationToken String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  events                   Event[]
  verifications    UserVerification[]
bookings      UserBooking[] 
}

model Verification {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  requiredDocs   String[] 
  isAutoApproved Boolean
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
   users         UserVerification[]
  events      VerificationOnEvent[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  posterUrl   String
  ticketPrice Float    @default(0.00)
  max_attendees Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  organizerId Int
  organizer   User      @relation(fields: [organizerId], references: [id])
  verifications VerificationOnEvent[]
  bookings      UserBooking[]
  takenSeats Int?
}

model UserVerification {
  id              Int      @id @default(autoincrement())
  userId          Int
  verificationId  Int
  uploads         String[]
  status          Boolean? // null: pending, false: rejected, true: approved
  reason          String?
  requestChanges  String?
  changed         Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  verification    Verification @relation(fields: [verificationId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VerificationOnEvent {
  eventId        Int
  verificationId Int
  event          Event        @relation(fields: [eventId], references: [id])
  verification   Verification @relation(fields: [verificationId], references: [id])

  @@id([eventId, verificationId])
}

model UserBooking {
  id              Int      @id @default(autoincrement())
  userId          Int
  eventId         Int
  status          Boolean?
 
  user            User     @relation(fields: [userId], references: [id])
  event           Event    @relation(fields: [eventId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

